/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo.
// source: api.proto
// DO NOT EDIT!

/*
	Package v1alpha is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		ConfigDataRequest
		ConfigDataResponse
		AddContainerRequest
		AddContainerResponse
		RemoveContainerRequest
		RemoveContainerResponse
		State
*/
package v1alpha

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ConfigData is the message sent from kubelet to CPU manager extension plugin containing the plugin configuration. This data is opaque to the kubelet.
type ConfigDataRequest struct {
	// A dictionary of configuration data
	Configuration map[string]string `protobuf:"bytes,1,rep,name=configuration" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State         *State            `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *ConfigDataRequest) Reset()                    { *m = ConfigDataRequest{} }
func (*ConfigDataRequest) ProtoMessage()               {}
func (*ConfigDataRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *ConfigDataRequest) GetConfiguration() map[string]string {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *ConfigDataRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// ConfigDataResponse is the message sent from CPU manager extension plugin to kubelet as a response for SetConfigData request.
type ConfigDataResponse struct {
	// Error value
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Initial CPU state
	SharedCpuSet string `protobuf:"bytes,2,opt,name=sharedCpuSet,proto3" json:"sharedCpuSet,omitempty"`
	// Initial HT state
	OfflineCpuSet string `protobuf:"bytes,3,opt,name=offlineCpuSet,proto3" json:"offlineCpuSet,omitempty"`
}

func (m *ConfigDataResponse) Reset()                    { *m = ConfigDataResponse{} }
func (*ConfigDataResponse) ProtoMessage()               {}
func (*ConfigDataResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *ConfigDataResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ConfigDataResponse) GetSharedCpuSet() string {
	if m != nil {
		return m.SharedCpuSet
	}
	return ""
}

func (m *ConfigDataResponse) GetOfflineCpuSet() string {
	if m != nil {
		return m.OfflineCpuSet
	}
	return ""
}

// AddContainerRequest is the message sent from kubelet to CPU manager extension plugin indicating that a container is added.
type AddContainerRequest struct {
	// Added container ID
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	State       *State `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *AddContainerRequest) Reset()                    { *m = AddContainerRequest{} }
func (*AddContainerRequest) ProtoMessage()               {}
func (*AddContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *AddContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *AddContainerRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// ContainerResponse is the message sent from CPU manager extension plugin to kubelet as a response for AddContainer request.
type AddContainerResponse struct {
	// Error value
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// CPUSet for shared CPUs, string representation
	SharedCpuSet string `protobuf:"bytes,2,opt,name=sharedCpuSet,proto3" json:"sharedCpuSet,omitempty"`
	// CPUSet for exclusive CPUs, string representation
	ExclusiveCpuSet string `protobuf:"bytes,3,opt,name=exclusiveCpuSet,proto3" json:"exclusiveCpuSet,omitempty"`
	// CPUSet for to-be-offline CPUs, string representation
	OfflineCpuSet string `protobuf:"bytes,4,opt,name=offlineCpuSet,proto3" json:"offlineCpuSet,omitempty"`
}

func (m *AddContainerResponse) Reset()                    { *m = AddContainerResponse{} }
func (*AddContainerResponse) ProtoMessage()               {}
func (*AddContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *AddContainerResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *AddContainerResponse) GetSharedCpuSet() string {
	if m != nil {
		return m.SharedCpuSet
	}
	return ""
}

func (m *AddContainerResponse) GetExclusiveCpuSet() string {
	if m != nil {
		return m.ExclusiveCpuSet
	}
	return ""
}

func (m *AddContainerResponse) GetOfflineCpuSet() string {
	if m != nil {
		return m.OfflineCpuSet
	}
	return ""
}

// RemoveContainerRequest is the message sent from kubelet to CPU manager extension plugin indicating that a container is gone.
type RemoveContainerRequest struct {
	// Removed container ID
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	State       *State `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (m *RemoveContainerRequest) Reset()                    { *m = RemoveContainerRequest{} }
func (*RemoveContainerRequest) ProtoMessage()               {}
func (*RemoveContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *RemoveContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *RemoveContainerRequest) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

// RemoveContainerResponse is the message sent from CPU manager extension plugin to kubelet as a response for RemoveContainer request.
type RemoveContainerResponse struct {
	// Error value
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// CPUSet for shared CPUs, string representation
	SharedCpuSet string `protobuf:"bytes,2,opt,name=sharedCpuSet,proto3" json:"sharedCpuSet,omitempty"`
	// CPUSet for exclusive CPUs, string representation
	ExclusiveCpuSet string `protobuf:"bytes,3,opt,name=exclusiveCpuSet,proto3" json:"exclusiveCpuSet,omitempty"`
	// CPUSet for to-be-offline CPUs, string representation
	OfflineCpuSet string `protobuf:"bytes,4,opt,name=offlineCpuSet,proto3" json:"offlineCpuSet,omitempty"`
}

func (m *RemoveContainerResponse) Reset()                    { *m = RemoveContainerResponse{} }
func (*RemoveContainerResponse) ProtoMessage()               {}
func (*RemoveContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *RemoveContainerResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RemoveContainerResponse) GetSharedCpuSet() string {
	if m != nil {
		return m.SharedCpuSet
	}
	return ""
}

func (m *RemoveContainerResponse) GetExclusiveCpuSet() string {
	if m != nil {
		return m.ExclusiveCpuSet
	}
	return ""
}

func (m *RemoveContainerResponse) GetOfflineCpuSet() string {
	if m != nil {
		return m.OfflineCpuSet
	}
	return ""
}

type State struct {
	Cpuset          string `protobuf:"bytes,1,opt,name=cpuset,proto3" json:"cpuset,omitempty"`
	Defaultcpuset   string `protobuf:"bytes,2,opt,name=defaultcpuset,proto3" json:"defaultcpuset,omitempty"`
	Cpusetordefault string `protobuf:"bytes,3,opt,name=cpusetordefault,proto3" json:"cpusetordefault,omitempty"`
	// map from container to cpuset (string representation)
	Cpuassignments map[string]string `protobuf:"bytes,4,rep,name=cpuassignments" json:"cpuassignments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *State) Reset()                    { *m = State{} }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *State) GetCpuset() string {
	if m != nil {
		return m.Cpuset
	}
	return ""
}

func (m *State) GetDefaultcpuset() string {
	if m != nil {
		return m.Defaultcpuset
	}
	return ""
}

func (m *State) GetCpusetordefault() string {
	if m != nil {
		return m.Cpusetordefault
	}
	return ""
}

func (m *State) GetCpuassignments() map[string]string {
	if m != nil {
		return m.Cpuassignments
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfigDataRequest)(nil), "v1alpha.ConfigDataRequest")
	proto.RegisterType((*ConfigDataResponse)(nil), "v1alpha.ConfigDataResponse")
	proto.RegisterType((*AddContainerRequest)(nil), "v1alpha.AddContainerRequest")
	proto.RegisterType((*AddContainerResponse)(nil), "v1alpha.AddContainerResponse")
	proto.RegisterType((*RemoveContainerRequest)(nil), "v1alpha.RemoveContainerRequest")
	proto.RegisterType((*RemoveContainerResponse)(nil), "v1alpha.RemoveContainerResponse")
	proto.RegisterType((*State)(nil), "v1alpha.State")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CpuManagerPlugin service

type CpuManagerPluginClient interface {
	// SetConfigData configures the plugin with the state/configuration from kubelet
	SetConfigData(ctx context.Context, in *ConfigDataRequest, opts ...grpc.CallOption) (*ConfigDataResponse, error)
	// AddContainer notifies plugin that a container has been removed.
	AddContainer(ctx context.Context, in *AddContainerRequest, opts ...grpc.CallOption) (*AddContainerResponse, error)
	// RemoveContainer notifies plugin that a container has been removed.
	RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*RemoveContainerResponse, error)
}

type cpuManagerPluginClient struct {
	cc *grpc.ClientConn
}

func NewCpuManagerPluginClient(cc *grpc.ClientConn) CpuManagerPluginClient {
	return &cpuManagerPluginClient{cc}
}

func (c *cpuManagerPluginClient) SetConfigData(ctx context.Context, in *ConfigDataRequest, opts ...grpc.CallOption) (*ConfigDataResponse, error) {
	out := new(ConfigDataResponse)
	err := grpc.Invoke(ctx, "/v1alpha.CpuManagerPlugin/SetConfigData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuManagerPluginClient) AddContainer(ctx context.Context, in *AddContainerRequest, opts ...grpc.CallOption) (*AddContainerResponse, error) {
	out := new(AddContainerResponse)
	err := grpc.Invoke(ctx, "/v1alpha.CpuManagerPlugin/AddContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuManagerPluginClient) RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*RemoveContainerResponse, error) {
	out := new(RemoveContainerResponse)
	err := grpc.Invoke(ctx, "/v1alpha.CpuManagerPlugin/RemoveContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CpuManagerPlugin service

type CpuManagerPluginServer interface {
	// SetConfigData configures the plugin with the state/configuration from kubelet
	SetConfigData(context.Context, *ConfigDataRequest) (*ConfigDataResponse, error)
	// AddContainer notifies plugin that a container has been removed.
	AddContainer(context.Context, *AddContainerRequest) (*AddContainerResponse, error)
	// RemoveContainer notifies plugin that a container has been removed.
	RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error)
}

func RegisterCpuManagerPluginServer(s *grpc.Server, srv CpuManagerPluginServer) {
	s.RegisterService(&_CpuManagerPlugin_serviceDesc, srv)
}

func _CpuManagerPlugin_SetConfigData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuManagerPluginServer).SetConfigData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha.CpuManagerPlugin/SetConfigData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuManagerPluginServer).SetConfigData(ctx, req.(*ConfigDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuManagerPlugin_AddContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuManagerPluginServer).AddContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha.CpuManagerPlugin/AddContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuManagerPluginServer).AddContainer(ctx, req.(*AddContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuManagerPlugin_RemoveContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuManagerPluginServer).RemoveContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha.CpuManagerPlugin/RemoveContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuManagerPluginServer).RemoveContainer(ctx, req.(*RemoveContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CpuManagerPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha.CpuManagerPlugin",
	HandlerType: (*CpuManagerPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfigData",
			Handler:    _CpuManagerPlugin_SetConfigData_Handler,
		},
		{
			MethodName: "AddContainer",
			Handler:    _CpuManagerPlugin_AddContainer_Handler,
		},
		{
			MethodName: "RemoveContainer",
			Handler:    _CpuManagerPlugin_RemoveContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ConfigDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configuration) > 0 {
		for k := range m.Configuration {
			dAtA[i] = 0xa
			i++
			v := m.Configuration[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.State != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State.Size()))
		n1, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ConfigDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.SharedCpuSet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SharedCpuSet)))
		i += copy(dAtA[i:], m.SharedCpuSet)
	}
	if len(m.OfflineCpuSet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OfflineCpuSet)))
		i += copy(dAtA[i:], m.OfflineCpuSet)
	}
	return i, nil
}

func (m *AddContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	if m.State != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State.Size()))
		n2, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AddContainerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddContainerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.SharedCpuSet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SharedCpuSet)))
		i += copy(dAtA[i:], m.SharedCpuSet)
	}
	if len(m.ExclusiveCpuSet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExclusiveCpuSet)))
		i += copy(dAtA[i:], m.ExclusiveCpuSet)
	}
	if len(m.OfflineCpuSet) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OfflineCpuSet)))
		i += copy(dAtA[i:], m.OfflineCpuSet)
	}
	return i, nil
}

func (m *RemoveContainerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveContainerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	if m.State != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State.Size()))
		n3, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RemoveContainerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveContainerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.SharedCpuSet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SharedCpuSet)))
		i += copy(dAtA[i:], m.SharedCpuSet)
	}
	if len(m.ExclusiveCpuSet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExclusiveCpuSet)))
		i += copy(dAtA[i:], m.ExclusiveCpuSet)
	}
	if len(m.OfflineCpuSet) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OfflineCpuSet)))
		i += copy(dAtA[i:], m.OfflineCpuSet)
	}
	return i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cpuset) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cpuset)))
		i += copy(dAtA[i:], m.Cpuset)
	}
	if len(m.Defaultcpuset) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Defaultcpuset)))
		i += copy(dAtA[i:], m.Defaultcpuset)
	}
	if len(m.Cpusetordefault) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cpusetordefault)))
		i += copy(dAtA[i:], m.Cpusetordefault)
	}
	if len(m.Cpuassignments) > 0 {
		for k := range m.Cpuassignments {
			dAtA[i] = 0x22
			i++
			v := m.Cpuassignments[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConfigDataRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Configuration) > 0 {
		for k, v := range m.Configuration {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ConfigDataResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SharedCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OfflineCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AddContainerRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AddContainerResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SharedCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExclusiveCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OfflineCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RemoveContainerRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *RemoveContainerResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SharedCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExclusiveCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OfflineCpuSet)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *State) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cpuset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Defaultcpuset)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cpusetordefault)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Cpuassignments) > 0 {
		for k, v := range m.Cpuassignments {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConfigDataRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForConfiguration := make([]string, 0, len(this.Configuration))
	for k := range this.Configuration {
		keysForConfiguration = append(keysForConfiguration, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForConfiguration)
	mapStringForConfiguration := "map[string]string{"
	for _, k := range keysForConfiguration {
		mapStringForConfiguration += fmt.Sprintf("%v: %v,", k, this.Configuration[k])
	}
	mapStringForConfiguration += "}"
	s := strings.Join([]string{`&ConfigDataRequest{`,
		`Configuration:` + mapStringForConfiguration + `,`,
		`State:` + strings.Replace(fmt.Sprintf("%v", this.State), "State", "State", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigDataResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigDataResponse{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`SharedCpuSet:` + fmt.Sprintf("%v", this.SharedCpuSet) + `,`,
		`OfflineCpuSet:` + fmt.Sprintf("%v", this.OfflineCpuSet) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddContainerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddContainerRequest{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`State:` + strings.Replace(fmt.Sprintf("%v", this.State), "State", "State", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddContainerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddContainerResponse{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`SharedCpuSet:` + fmt.Sprintf("%v", this.SharedCpuSet) + `,`,
		`ExclusiveCpuSet:` + fmt.Sprintf("%v", this.ExclusiveCpuSet) + `,`,
		`OfflineCpuSet:` + fmt.Sprintf("%v", this.OfflineCpuSet) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveContainerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveContainerRequest{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`State:` + strings.Replace(fmt.Sprintf("%v", this.State), "State", "State", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveContainerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveContainerResponse{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`SharedCpuSet:` + fmt.Sprintf("%v", this.SharedCpuSet) + `,`,
		`ExclusiveCpuSet:` + fmt.Sprintf("%v", this.ExclusiveCpuSet) + `,`,
		`OfflineCpuSet:` + fmt.Sprintf("%v", this.OfflineCpuSet) + `,`,
		`}`,
	}, "")
	return s
}
func (this *State) String() string {
	if this == nil {
		return "nil"
	}
	keysForCpuassignments := make([]string, 0, len(this.Cpuassignments))
	for k := range this.Cpuassignments {
		keysForCpuassignments = append(keysForCpuassignments, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCpuassignments)
	mapStringForCpuassignments := "map[string]string{"
	for _, k := range keysForCpuassignments {
		mapStringForCpuassignments += fmt.Sprintf("%v: %v,", k, this.Cpuassignments[k])
	}
	mapStringForCpuassignments += "}"
	s := strings.Join([]string{`&State{`,
		`Cpuset:` + fmt.Sprintf("%v", this.Cpuset) + `,`,
		`Defaultcpuset:` + fmt.Sprintf("%v", this.Defaultcpuset) + `,`,
		`Cpusetordefault:` + fmt.Sprintf("%v", this.Cpusetordefault) + `,`,
		`Cpuassignments:` + mapStringForCpuassignments + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConfigDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Configuration == nil {
				m.Configuration = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthApi
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Configuration[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Configuration[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflineCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddContainerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddContainerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddContainerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExclusiveCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflineCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveContainerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveContainerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveContainerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveContainerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveContainerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveContainerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExclusiveCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineCpuSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflineCpuSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpuset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpuset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defaultcpuset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defaultcpuset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpusetordefault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpusetordefault = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpuassignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApi
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Cpuassignments == nil {
				m.Cpuassignments = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthApi
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Cpuassignments[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Cpuassignments[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xed, 0x26, 0x4d, 0x51, 0x26, 0x49, 0x5b, 0xb6, 0x55, 0x89, 0x4c, 0x31, 0xc1, 0xea, 0x21,
	0x97, 0xa6, 0x22, 0x5c, 0x10, 0x27, 0x4a, 0xe0, 0x40, 0xa5, 0x4a, 0xc8, 0x91, 0x38, 0x82, 0x36,
	0xf6, 0xc6, 0xb1, 0x70, 0x76, 0xcd, 0x7e, 0x44, 0xf4, 0xc6, 0x85, 0x3b, 0x3f, 0x01, 0x89, 0x3f,
	0xd3, 0x63, 0x8f, 0x1c, 0x69, 0xf8, 0x1f, 0x08, 0xc5, 0xbb, 0x09, 0x38, 0x71, 0x24, 0x10, 0x42,
	0xe2, 0xb6, 0xf3, 0xe6, 0xcd, 0x9b, 0xf1, 0xf3, 0xce, 0x42, 0x95, 0xa4, 0x71, 0x27, 0x15, 0x5c,
	0x71, 0x7c, 0x63, 0x72, 0x9f, 0x24, 0xe9, 0x88, 0x38, 0xc7, 0x51, 0xac, 0x46, 0x7a, 0xd0, 0x09,
	0xf8, 0xf8, 0x24, 0xe2, 0x11, 0x3f, 0xc9, 0xf2, 0x03, 0x3d, 0xcc, 0xa2, 0x2c, 0xc8, 0x4e, 0xa6,
	0xce, 0xbb, 0x42, 0x70, 0xb3, 0xc7, 0xd9, 0x30, 0x8e, 0x9e, 0x12, 0x45, 0x7c, 0xfa, 0x56, 0x53,
	0xa9, 0x70, 0x1f, 0x1a, 0x41, 0x06, 0x6a, 0x41, 0x54, 0xcc, 0x59, 0x13, 0xb5, 0xca, 0xed, 0x5a,
	0xf7, 0xb8, 0x63, 0xbb, 0x74, 0x56, 0x4a, 0x2c, 0x62, 0xf9, 0xcf, 0x98, 0x12, 0x17, 0x7e, 0x5e,
	0x03, 0x1f, 0x41, 0x45, 0x2a, 0xa2, 0x68, 0xb3, 0xd4, 0x42, 0xed, 0x5a, 0x77, 0x7b, 0x21, 0xd6,
	0x9f, 0xa1, 0xbe, 0x49, 0x3a, 0x8f, 0x01, 0xaf, 0x4a, 0xe1, 0x5d, 0x28, 0xbf, 0xa1, 0x17, 0x4d,
	0xd4, 0x42, 0xed, 0xaa, 0x3f, 0x3b, 0xe2, 0x7d, 0xa8, 0x4c, 0x48, 0xa2, 0x8d, 0x5a, 0xd5, 0x37,
	0xc1, 0xa3, 0xd2, 0x43, 0xe4, 0xa9, 0xb9, 0x82, 0x19, 0x4f, 0xa6, 0x9c, 0x49, 0x3a, 0xe3, 0x53,
	0x21, 0xb8, 0xb0, 0x1a, 0x26, 0xc0, 0x1e, 0xd4, 0xe5, 0x88, 0x08, 0x1a, 0xf6, 0x52, 0xdd, 0xa7,
	0xca, 0x8a, 0xe5, 0x30, 0x7c, 0x04, 0x0d, 0x3e, 0x1c, 0x26, 0x31, 0xa3, 0x96, 0x54, 0xce, 0x48,
	0x79, 0xd0, 0x7b, 0x05, 0x7b, 0xa7, 0x61, 0xd8, 0xe3, 0x4c, 0x91, 0x98, 0x51, 0x31, 0x77, 0xf2,
	0x1e, 0xd4, 0x83, 0x39, 0xf6, 0x3a, 0x0e, 0x6d, 0xf7, 0xda, 0x02, 0x7b, 0x1e, 0xfe, 0x9e, 0x2f,
	0xde, 0x27, 0x04, 0xfb, 0xf9, 0x06, 0x7f, 0xfd, 0x61, 0x6d, 0xd8, 0xa1, 0xef, 0x82, 0x44, 0xcb,
	0x78, 0x92, 0xff, 0xb4, 0x65, 0x78, 0xd5, 0x82, 0xcd, 0x22, 0x0b, 0x08, 0x1c, 0xf8, 0x74, 0xcc,
	0x27, 0xf4, 0xdf, 0xb9, 0xf0, 0x19, 0xc1, 0xad, 0x95, 0x1e, 0xff, 0x9d, 0x11, 0xdf, 0x11, 0x54,
	0xb2, 0xb1, 0xf1, 0x01, 0x6c, 0x05, 0xa9, 0x96, 0x54, 0xd9, 0xa1, 0x6c, 0x34, 0xd3, 0x09, 0xe9,
	0x90, 0xe8, 0x44, 0xd9, 0xb4, 0x19, 0x2b, 0x0f, 0xce, 0xe6, 0x32, 0x27, 0x2e, 0x6c, 0x62, 0x3e,
	0xd7, 0x12, 0x8c, 0xcf, 0x60, 0x3b, 0x48, 0x35, 0x91, 0x32, 0x8e, 0xd8, 0x98, 0x32, 0x25, 0x9b,
	0x9b, 0xd9, 0xc6, 0x7a, 0x79, 0x1b, 0x3b, 0xbd, 0x1c, 0xc9, 0xac, 0xe9, 0x52, 0xa5, 0x73, 0x0a,
	0x7b, 0x05, 0xb4, 0x3f, 0x59, 0xc1, 0xee, 0x87, 0x12, 0xec, 0xf6, 0x52, 0x7d, 0x4e, 0x18, 0x89,
	0xa8, 0x78, 0x91, 0xe8, 0x28, 0x66, 0xf8, 0x0c, 0x1a, 0x7d, 0xaa, 0x7e, 0xae, 0x26, 0x76, 0xd6,
	0x3f, 0x27, 0xce, 0xed, 0xc2, 0x9c, 0xf9, 0xd3, 0xde, 0x06, 0x3e, 0x87, 0xfa, 0xaf, 0xcb, 0x80,
	0x0f, 0x17, 0xf4, 0x82, 0x25, 0x74, 0xee, 0xac, 0xc9, 0x2e, 0xe4, 0x5e, 0xc2, 0xce, 0xd2, 0xad,
	0xc2, 0x77, 0x17, 0x35, 0xc5, 0x77, 0xda, 0x69, 0xad, 0x27, 0xcc, 0x75, 0x9f, 0x1c, 0x5e, 0x5e,
	0xbb, 0xe8, 0xcb, 0xb5, 0xbb, 0xf1, 0x7e, 0xea, 0xa2, 0xcb, 0xa9, 0x8b, 0xae, 0xa6, 0x2e, 0xfa,
	0x3a, 0x75, 0xd1, 0xc7, 0x6f, 0xee, 0xc6, 0x60, 0x2b, 0x7b, 0x82, 0x1f, 0xfc, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0x8b, 0x8c, 0xb5, 0xc7, 0x05, 0x00, 0x00,
}
